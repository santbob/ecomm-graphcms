import { useState, useEffect } from 'react'
import Head from 'next/head'
import { FaExternalLinkAlt } from 'react-icons/fa';

import Layout from '@components/Layout';
import Container from '@components/Container';
import Map from '@components/Map';

import styles from '@styles/Page.module.scss'

import {
  ApolloClient,
  InMemoryCache,
  gql
} from "@apollo/client";

import center from '@turf/center';
import { points } from '@turf/helpers';

export default function Stores({ storeLocations }) {
  const [activeStore, setActiveStore] = useState();
  console.log({ activeStore })
  const features = points(storeLocations.map(({ location }) => {
    return [location.latitude, location.longitude];
  }));

  const centerCoordinates = center(features)?.geometry.coordinates;

  return (
    <Layout>
      <Head>
        <title>Store Locations</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container>
        <h1>Locations</h1>

        <div className={styles.stores}>

          <div className={styles.storesLocations}>
            <ul className={styles.locations}>
              {storeLocations.map(store => {
                const handleOnClick = () => {
                  setActiveStore(store.id);
                }
                return (<li key={store.id}>
                  <p className={styles.locationName}>
                    {store.name}
                  </p>
                  <address>
                    {store.address}
                  </address>
                  <p>
                    {store.phoneNumber}
                  </p>
                  <p className={styles.locationDiscovery}>
                    <button onClick={handleOnClick}>
                      View on Map
                    </button>
                    <a href={`https://www.google.com/maps/dir//${store.location.latitude},${store.location.longitude}/@${store.location.latitude},${store.location.longitude},17z/`} target="_blank" rel="noreferrer">
                      Get Directions
                      <FaExternalLinkAlt />
                    </a>
                  </p>
                </li>)
              })}
            </ul>
          </div>

          <div className={styles.storesMap}>
            <div className={styles.storesMapContainer}>
              <Map className={styles.map} center={centerCoordinates} zoom={4} scrollWheelZoom={false}>
                {({ TileLayer, Marker, Popup }, map) => {

                  const EmptyComponent = () => {
                    useEffect(() => {
                      if (!activeStore) return;
                      const selectedStore = storeLocations.find(({ id }) => id === activeStore);
                      map.setView([selectedStore.location.latitude, selectedStore.location.longitude], 17);
                    }, [activeStore]);
                    return null
                  };

                  return (
                    <>
                      <EmptyComponent />
                      <TileLayer
                        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                      />
                      {storeLocations.map(store => (
                        <Marker position={[store.location.latitude, store.location.longitude]} key={store.id}>
                          <Popup>
                            <p>{store.name}</p>
                            <p>{store.address}</p>
                            <p>{store.phoneNumber}</p>
                          </Popup>
                        </Marker>
                      ))}

                    </>
                  )
                }}
              </Map>
            </div>
          </div>
        </div>
      </Container>
    </Layout >
  )
}
export async function getStaticProps() {

  const client = new ApolloClient({
    uri: 'https://api-us-west-2.graphcms.com/v2/cl1wywy4e0njk01yx0lf5ebto/master',
    cache: new InMemoryCache()
  });

  const { data } = await client.query({
    query: gql`
      query PageStores {
        storeLocations {
          id
          name
          phoneNumber
          address
          location {
            latitude
            longitude
          }
        }
      }`
  });
  console.log("result ", data.storeLocations);
  return {
    props: {
      storeLocations: data.storeLocations
    },
  }
}
